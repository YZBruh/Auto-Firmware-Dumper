name: Auto Firmware Dumper Ares

on:
  workflow_dispatch:
    inputs:
      USER_NAME:
        description: 'GitHub Name'
        required: true
        default: '„ÉÑ‡πõabrohim‡πõ'
      USER_EMAIL:
        description: 'GitHub Email'
        required: true
        default: 'callofduty.pubg786@gmail.com'
      FIRMWARE_URL:
        description: 'Stock ROM Link'
        required: true
        default: ''
      GENERATE_VENDOR:
        description: 'Create Vendor Tree'
        required: true
        default: false
        type: boolean
      UPLOAD_LINEAGE_DT:
        description: 'Upload LineageOS tree'
        required: true
        default: false
        type: boolean
      UPLOAD_TWRP_DT:
        description: 'Upload TWRP tree'
        required: true
        default: false
        type: boolean

jobs:
  dump:
    name: Auto Firmware Dumper
    runs-on: ubuntu-latest
    env:
      BASE_DIR: ${{ github.workspace }}/Auto-Dumper
      GITHUB_TOKEN: ${{ secrets.GTOKEN }}
    permissions:
      contents: write
    steps:
    - name: üöÄ Check Out
      uses: actions/checkout@v4
      
    - name: üßπ Cleanup
      uses: rokibhasansagar/slimhub_actions@main
        
    - name: ‚öôÔ∏è Install Dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y \
          cpio aria2 git python3 neofetch tar gzip \
          python3-pip python3-venv
        sudo pip3 install aospdtgen twrpdtgen

    - name: üîë Setup GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt-get update
        sudo apt-get install gh -y

    - name: üì• Clone DumprX
      run: |
        mkdir -p "$BASE_DIR"
        git clone https://github.com/DumprX/DumprX "$BASE_DIR/DumprX"
        chmod +x "$BASE_DIR/DumprX"/*.sh

    - name: üîß Setup DumprX
      run: |
        cd "$BASE_DIR/DumprX"
        ./setup.sh

    - name: ‚ö° Create Dump
      run: |
        cd "$BASE_DIR/DumprX"
        ./dumper.sh "${{ github.event.inputs.FIRMWARE_URL }}"
        chmod -R 777 out

    - name: üîê Configure Git
      run: |
        git config --global user.name "${{ github.event.inputs.USER_NAME }}"
        git config --global user.email "${{ github.event.inputs.USER_EMAIL }}"
        gh auth login --with-token <<< "$GITHUB_TOKEN"

    - name: üì¶ Process Dump
      run: |
        cd "$BASE_DIR/DumprX/out"
        
        # Extract device info
        BRAND=""
        CODENAME=""
        
        # Try different property locations
        for prop_file in system/build.prop vendor/build.prop system/system/build.prop; do
          if [ -f "$prop_file" ]; then
            BRAND=$(grep -E "ro\.(product|vendor)\.brand=" "$prop_file" | head -1 | cut -d'=' -f2 | tr 'A-Z' 'a-z')
            CODENAME=$(grep -E "ro\.(product|vendor|system)\.device=" "$prop_file" | head -1 | cut -d'=' -f2 | tr -d '[:space:]')
            [ -n "$BRAND" ] && [ -n "$CODENAME" ] && break
          fi
        done
        
        [ -z "$CODENAME" ] && CODENAME="unknown"
        [ -z "$BRAND" ] && BRAND="unknown"
        
        echo "Brand: $BRAND"
        echo "Codename: $CODENAME"
        
        # Save device info
        echo "$CODENAME" > "$BASE_DIR/codename.txt"
        echo "$BRAND" > "$BASE_DIR/brand.txt"
        
        # Extract Android version
        VERSION=$(grep -E "ro\.build\.version\.(release|incremental)=" build.prop 2>/dev/null | head -1 | cut -d'=' -f2)
        [ -z "$VERSION" ] && VERSION="unknown"
        echo "$VERSION" > "$BASE_DIR/version.txt"

    - name: üì§ Upload ROM Dump
      run: |
        cd "$BASE_DIR/DumprX/out"
        DATESTAMP=$(date +%Y%m%d)
        CODENAME=$(cat "$BASE_DIR/codename.txt")
        BRAND=$(cat "$BASE_DIR/brand.txt")
        
        # Compress large images
        find . -type f \( -name "*.img" -o -name "*.bin" \) -size +40M | while read -r file; do
          gzip -f "$file"
        done
        
        # Create repository
        gh repo create "dump_${BRAND}_${CODENAME}" --public --confirm
        git init -b main
        git add .
        git commit -m "Dump for $BRAND $CODENAME"
        git push https://$GITHUB_TOKEN@github.com/${{ github.repository_owner }}/dump_${BRAND}_${CODENAME}.git main

    - name: üõ†Ô∏è Generate Vendor Tree
      if: ${{ github.event.inputs.GENERATE_VENDOR == 'true' }}
      run: |
        cd "$BASE_DIR"
        CODENAME=$(cat codename.txt)
        BRAND=$(cat brand.txt)
        
        # Create vendor tree structure
        mkdir -p vendor-tree/android/device/$BRAND/$CODENAME
        mkdir -p vendor-tree/android/vendor/$BRAND/$CODENAME
        
        # Generate vendor makefiles
        cd "$BASE_DIR/DumprX/out"
        extract-files.py --input . --output ../vendor-tree/android
        
        # Push vendor tree
        cd "$BASE_DIR/vendor-tree/android/vendor/$BRAND/$CODENAME"
        gh repo create "android_vendor_${BRAND}_${CODENAME}" --public --confirm
        git init -b main
        git add .
        git commit -m "Initial vendor tree for $CODENAME"
        git push https://$GITHUB_TOKEN@github.com/${{ github.repository_owner }}/android_vendor_${BRAND}_${CODENAME}.git main

    - name: üåê Upload LineageOS Tree
      if: ${{ github.event.inputs.UPLOAD_LINEAGE_DT == 'true' }}
      run: |
        cd "$BASE_DIR/DumprX/out"
        CODENAME=$(cat "$BASE_DIR/codename.txt")
        BRAND=$(cat "$BASE_DIR/brand.txt")
        
        if [ -d lineage-device-tree ]; then
          cd lineage-device-tree
          gh repo create "lineage_device_${BRAND}_${CODENAME}" --public --confirm
          git init -b main
          git add .
          git commit -m "LineageOS device tree for $CODENAME"
          git push https://$GITHUB_TOKEN@github.com/${{ github.repository_owner }}/lineage_device_${BRAND}_${CODENAME}.git main
        else
          echo "Lineage device tree not found!"
        fi

    - name: üîÑ Upload TWRP Tree
      if: ${{ github.event.inputs.UPLOAD_TWRP_DT == 'true' }}
      run: |
        cd "$BASE_DIR/DumprX/out"
        CODENAME=$(cat "$BASE_DIR/codename.txt")
        BRAND=$(cat "$BASE_DIR/brand.txt")
        VERSION=$(cat "$BASE_DIR/version.txt")
        
        if [ -d twrp-device-tree ]; then
          cd twrp-device-tree
          [ -d "$BRAND/$CODENAME" ] && cd "$BRAND/$CODENAME"
          
          gh repo create "twrp_device_${BRAND}_${CODENAME}" --public --confirm
          git init -b main
          git add .
          git commit -m "TWRP device tree for $CODENAME (Android $VERSION)"
          git push https://$GITHUB_TOKEN@github.com/${{ github.repository_owner }}/twrp_device_${BRAND}_${CODENAME}.git main
        else
          echo "TWRP device tree not found!"
        fi

    - name: üì∑ Upload Images
      uses: actions/upload-artifact@v4
      with:
        name: firmware-images
        path: |
          ${{ env.BASE_DIR }}/DumprX/out/*.img
          ${{ env.BASE_DIR }}/DumprX/out/*.img.gz
        retention-days: 1
